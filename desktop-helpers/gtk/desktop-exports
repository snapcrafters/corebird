###############################################
# Launcher common exports for any desktop app #
###############################################

WITH_RUNTIME=no
if [ -z "$RUNTIME" ]; then
  RUNTIME=$SNAP
else
  # add general paths not added by snapcraft due to runtime snap
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH:$RUNTIME/usr/lib
  export PATH=$PATH:$RUNTIME/usr/bin
  WITH_RUNTIME=yes
fi

# XKB config
export XKB_CONFIG_ROOT=$RUNTIME/usr/share/X11/xkb

# Give XOpenIM a chance to locate locale data.
# This is required for text input to work in SDL2 games.
export XLOCALEDIR=$RUNTIME/usr/share/X11/locale

# Mesa Libs for OpenGL support
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/mesa:$RUNTIME/usr/lib/mesa
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/mesa-egl:$RUNTIME/usr/lib/mesa-egl

# Tell libGL where to find the drivers
export LIBGL_DRIVERS_PATH=$RUNTIME/usr/lib/$ARCH/dri
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$LIBGL_DRIVERS_PATH

# Workaround in snapd for proprietary nVidia drivers mounts the drivers in
# /var/lib/snapd/lib/gl that needs to be in LD_LIBRARY_PATH
# Without that OpenGL using apps do not work with the nVidia drivers.
# Ref.: https://bugs.launchpad.net/snappy/+bug/1588192
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/var/lib/snapd/lib/gl

# Mir
if [ -n "$DISPLAY" ]; then
  # Either we are in legacy env (e.g. unity7) or ubuntu-app-launch is launching
  # us intentionally in an XMir environment, in which case we should use it.
  # Specifically unset because some versions of UAL unconditionally set
  # MIR_SOCKET for us, even if launching us under XMir.
  unset MIR_SOCKET
elif [ -S /run/user/$(id -u)/mir_socket ]; then
  export MIR_SOCKET=/run/user/$(id -u)/mir_socket
elif [ -S /run/mir_socket ]; then
  # Fall back to global location if there is no user server (e.g. on a kiosk)
  export MIR_SOCKET=/run/mir_socket
fi
if [ -d $SNAP/mir-libs/$ARCH ]; then
  export MIR_CLIENT_PLATFORM_PATH=$SNAP/mir-libs/$ARCH/mir/client-platform
  # Put mir-libs first because it's easy to end up with a snap-internal copy
  export LD_LIBRARY_PATH=$SNAP/mir-libs/$ARCH:$LD_LIBRARY_PATH
elif [ -d $RUNTIME/usr/lib/$ARCH/mir ]; then
  # As of this writing, ubuntu-app-platform holds a copy of the Mir libraries,
  # but may remove them in favor of mir-libs.  Use them if present.
  # We check both RUNTIME and SNAP (below) because if the SDK does drop the
  # libraries, we want to fall back to an internal copy transparently.
  export MIR_CLIENT_PLATFORM_PATH=$RUNTIME/usr/lib/$ARCH/mir/client-platform
else
  # Fall back to internal copy.
  export MIR_CLIENT_PLATFORM_PATH=$SNAP/usr/lib/$ARCH/mir/client-platform
fi

# Unity7 export (workaround for https://launchpad.net/bugs/1638405)
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/libunity

# Pulseaudio export
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$RUNTIME/usr/lib/$ARCH/pulseaudio:$RUNTIME/usr/lib/pulseaudio

# Tell GStreamer where to find its plugins
if [ -d $SNAP/usr/lib/$ARCH/gstreamer-1.0 ]; then
  export GST_PLUGIN_PATH=$SNAP/usr/lib/$ARCH/gstreamer-1.0
elif [ -d $SNAP/usr/lib/gstreamer-1.0 ]; then
  export GST_PLUGIN_PATH=$SNAP/usr/lib/gstreamer-1.0
fi
if [ -d $RUNTIME/usr/lib/$ARCH/gstreamer-1.0 ]; then
  export GST_PLUGIN_SYSTEM_PATH=$RUNTIME/usr/lib/$ARCH/gstreamer-1.0
elif [ -d $RUNTIME/usr/lib/gstreamer-1.0 ]; then
  export GST_PLUGIN_SYSTEM_PATH=$RUNTIME/usr/lib/gstreamer-1.0
fi

# gst plugin scanner doesn't install in the correct path: https://github.com/ubuntu/snapcraft-desktop-helpers/issues/43
if [ -e $RUNTIME/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner ]; then
  export GST_PLUGIN_SCANNER=$RUNTIME/usr/lib/$ARCH/gstreamer1.0/gstreamer-1.0/gst-plugin-scanner
elif [ -e $RUNTIME/usr/libexec/gstreamer-1.0/gst-plugin-scanner ]; then
  export GST_PLUGIN_SCANNER=$RUNTIME/usr/libexec/gstreamer-1.0/gst-plugin-scanner
fi

# XDG Config
export XDG_CONFIG_DIRS=$RUNTIME/etc/xdg:$RUNTIME/usr/xdg:$XDG_CONFIG_DIRS
[ "$WITH_RUNTIME" = yes ] && XDG_CONFIG_DIRS=$SNAP/etc/xdg:$SNAP/usr/xdg:$XDG_CONFIG_DIRS # add local SNAP assets if a runtime is used

# Define snaps' own data dir
export XDG_DATA_DIRS=$SNAP_USER_DATA:$RUNTIME/usr/share:$XDG_DATA_DIRS
[ "$WITH_RUNTIME" = yes ] && XDG_DATA_DIRS=$SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS # add local SNAP assets if a runtime is used

# Set XDG_DATA_HOME to local path
export XDG_DATA_HOME=$SNAP_USER_DATA/.local/share
export XDG_DATA_DIRS=$XDG_DATA_HOME:$XDG_DATA_DIRS
mkdir -p $XDG_DATA_HOME

# Set cache folder to local path
export XDG_CACHE_HOME=$SNAP_USER_DATA/.cache
mkdir -p $XDG_CACHE_HOME

# Create $XDG_RUNTIME_DIR if not exists (to be removed when LP: #1656340 is fixed)
[ -n "$XDG_RUNTIME_DIR" ] && mkdir -p $XDG_RUNTIME_DIR -m 700

# GI repository
export GI_TYPELIB_PATH=$RUNTIME/usr/lib/girepository-1.0:$RUNTIME/usr/lib/$ARCH/girepository-1.0
[ "$WITH_RUNTIME" = yes ] && GI_TYPELIB_PATH=$SNAP/usr/lib/girepository-1.0:$SNAP/usr/lib/$ARCH/girepository-1.0 # add local SNAP assets if a runtime is used

# Font Config and themes
export FONTCONFIG_PATH=$RUNTIME/etc/fonts/conf.d
export FONTCONFIG_FILE=$RUNTIME/etc/fonts/fonts.conf
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/{fontconfig,fonts,fonts-*,themes,.themes}
  ln -sf $RUNTIME/usr/share/{fontconfig,fonts,fonts-*,themes} $XDG_DATA_HOME
  ln -sfn $RUNTIME/usr/share/themes $SNAP_USER_DATA/.themes
fi

# Build mime.cache
# needed for gtk and qt icon
if [ $needs_update = true ]; then
  rm -rf $XDG_DATA_HOME/mime
  if [ `which update-mime-database` ]; then
    cp --preserve=timestamps -dR $RUNTIME/usr/share/mime $XDG_DATA_HOME
    update-mime-database $XDG_DATA_HOME/mime
  fi
fi

# Ensure the app finds locale definitions (requires locales-all to be installed)
export LOCPATH=$LOCPATH:$SNAP/usr/lib/locale

# Gio modules and cache (including gsettings module)
export GIO_MODULE_DIR=$XDG_CACHE_HOME/gio-modules
function compile_giomodules {
  if [ -f $1/glib-2.0/gio-querymodules ]; then
    GIO_QUERY_MODULES=$1/glib-2.0/gio-querymodules
  elif [ -f $RUNTIME/usr/bin/gio-querymodules ]; then
    GIO_QUERY_MODULES=$RUNTIME/usr/bin/gio-querymodules
  fi

  if [ -n "$GIO_QUERY_MODULES" ]; then
    ln -s $1/gio/modules/*.so $GIO_MODULE_DIR
    $GIO_QUERY_MODULES $GIO_MODULE_DIR
  fi
}
if [ $needs_update = true ]; then
  rm -rf $GIO_MODULE_DIR
  mkdir -p $GIO_MODULE_DIR
  if [ -d $RUNTIME/usr/lib/$ARCH/gio/modules ]; then
    compile_giomodules $RUNTIME/usr/lib/$ARCH
  fi
  if [ -d $RUNTIME/usr/lib/gio/modules ]; then
    compile_giomodules $RUNTIME/usr/lib
  fi
fi

# Keep an array of data dirs, for looping through them
IFS=':' read -r -a data_dirs_array <<< "$XDG_DATA_DIRS"

# Setup compiled gsettings schema
GS_SCHEMA_DIR=$XDG_DATA_HOME/glib-2.0/schemas
function compile_schemas {
  if [ -f "$1" ]; then
    rm -rf $GS_SCHEMA_DIR
    mkdir -p $GS_SCHEMA_DIR
    for d in "${data_dirs_array[@]}"; do
      schema_dir=$d/glib-2.0/schemas
      if [ "$(ls -A $schema_dir/*.xml 2>/dev/null)" ]; then
        ln -s $schema_dir/*.xml $GS_SCHEMA_DIR
      fi
    done
    "$1" $GS_SCHEMA_DIR
  fi
}
if [ $needs_update = true ]; then
  if [ -f $RUNTIME/usr/lib/$ARCH/glib-2.0/glib-compile-schemas ]; then
    compile_schemas $RUNTIME/usr/lib/$ARCH/glib-2.0/glib-compile-schemas
  elif [ -f $RUNTIME/usr/lib/glib-2.0/glib-compile-schemas ]; then
    compile_schemas $RUNTIME/usr/lib/glib-2.0/glib-compile-schemas
  fi
fi

# Enable gsettings user changes
# symlink the dconf file if home plug is connected for read
DCONF_DEST_USER_DIR=$SNAP_USER_DATA/.config/dconf
if [ ! -f $DCONF_DEST_USER_DIR/user ]; then
  if [ -f /home/$USER/.config/dconf/user ]; then
    mkdir -p $DCONF_DEST_USER_DIR
    ln -s /home/$USER/.config/dconf/user $DCONF_DEST_USER_DIR
  fi
fi

# Testability support
if [ -d "$SNAP/testability/$ARCH" ]; then
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$SNAP/testability:$SNAP/testability/$ARCH:$SNAP/testability/$ARCH/mesa
fi
